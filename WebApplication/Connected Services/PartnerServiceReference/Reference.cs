//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1.PartnerServiceReference {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PartnerServiceReference.PartnerWebServicesSoap")]
    public interface PartnerWebServicesSoap {
        
        // CODEGEN: Parameter 'imageData' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddEvent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebApplication1.PartnerServiceReference.AddEventResponse AddEvent(WebApplication1.PartnerServiceReference.AddEventRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddEvent", ReplyAction="*")]
        System.Threading.Tasks.Task<WebApplication1.PartnerServiceReference.AddEventResponse> AddEventAsync(WebApplication1.PartnerServiceReference.AddEventRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetEventsByUserEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetEventsByUserEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetEventsByUserEmail", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetEventsByUserEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteEvent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DeleteEvent(string eventid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteEvent", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DeleteEventAsync(string eventid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateEvent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateEvent(string eventId, string event_name, string ticket_price, string date, string time, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateEvent", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateEventAsync(string eventId, string event_name, string ticket_price, string date, string time, string location);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddEvent", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AddEventRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string eventid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string event_name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string ticket_price;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string email;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string date;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string time;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string location;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public string description;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=8)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] imageData;
        
        public AddEventRequest() {
        }
        
        public AddEventRequest(string eventid, string event_name, string ticket_price, string email, string date, string time, string location, string description, byte[] imageData) {
            this.eventid = eventid;
            this.event_name = event_name;
            this.ticket_price = ticket_price;
            this.email = email;
            this.date = date;
            this.time = time;
            this.location = location;
            this.description = description;
            this.imageData = imageData;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddEventResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AddEventResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string AddEventResult;
        
        public AddEventResponse() {
        }
        
        public AddEventResponse(string AddEventResult) {
            this.AddEventResult = AddEventResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface PartnerWebServicesSoapChannel : WebApplication1.PartnerServiceReference.PartnerWebServicesSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PartnerWebServicesSoapClient : System.ServiceModel.ClientBase<WebApplication1.PartnerServiceReference.PartnerWebServicesSoap>, WebApplication1.PartnerServiceReference.PartnerWebServicesSoap {
        
        public PartnerWebServicesSoapClient() {
        }
        
        public PartnerWebServicesSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PartnerWebServicesSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PartnerWebServicesSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PartnerWebServicesSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebApplication1.PartnerServiceReference.AddEventResponse WebApplication1.PartnerServiceReference.PartnerWebServicesSoap.AddEvent(WebApplication1.PartnerServiceReference.AddEventRequest request) {
            return base.Channel.AddEvent(request);
        }
        
        public string AddEvent(string eventid, string event_name, string ticket_price, string email, string date, string time, string location, string description, byte[] imageData) {
            WebApplication1.PartnerServiceReference.AddEventRequest inValue = new WebApplication1.PartnerServiceReference.AddEventRequest();
            inValue.eventid = eventid;
            inValue.event_name = event_name;
            inValue.ticket_price = ticket_price;
            inValue.email = email;
            inValue.date = date;
            inValue.time = time;
            inValue.location = location;
            inValue.description = description;
            inValue.imageData = imageData;
            WebApplication1.PartnerServiceReference.AddEventResponse retVal = ((WebApplication1.PartnerServiceReference.PartnerWebServicesSoap)(this)).AddEvent(inValue);
            return retVal.AddEventResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebApplication1.PartnerServiceReference.AddEventResponse> WebApplication1.PartnerServiceReference.PartnerWebServicesSoap.AddEventAsync(WebApplication1.PartnerServiceReference.AddEventRequest request) {
            return base.Channel.AddEventAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebApplication1.PartnerServiceReference.AddEventResponse> AddEventAsync(string eventid, string event_name, string ticket_price, string email, string date, string time, string location, string description, byte[] imageData) {
            WebApplication1.PartnerServiceReference.AddEventRequest inValue = new WebApplication1.PartnerServiceReference.AddEventRequest();
            inValue.eventid = eventid;
            inValue.event_name = event_name;
            inValue.ticket_price = ticket_price;
            inValue.email = email;
            inValue.date = date;
            inValue.time = time;
            inValue.location = location;
            inValue.description = description;
            inValue.imageData = imageData;
            return ((WebApplication1.PartnerServiceReference.PartnerWebServicesSoap)(this)).AddEventAsync(inValue);
        }
        
        public System.Data.DataSet GetEventsByUserEmail(string email) {
            return base.Channel.GetEventsByUserEmail(email);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetEventsByUserEmailAsync(string email) {
            return base.Channel.GetEventsByUserEmailAsync(email);
        }
        
        public string DeleteEvent(string eventid) {
            return base.Channel.DeleteEvent(eventid);
        }
        
        public System.Threading.Tasks.Task<string> DeleteEventAsync(string eventid) {
            return base.Channel.DeleteEventAsync(eventid);
        }
        
        public string UpdateEvent(string eventId, string event_name, string ticket_price, string date, string time, string location) {
            return base.Channel.UpdateEvent(eventId, event_name, ticket_price, date, time, location);
        }
        
        public System.Threading.Tasks.Task<string> UpdateEventAsync(string eventId, string event_name, string ticket_price, string date, string time, string location) {
            return base.Channel.UpdateEventAsync(eventId, event_name, ticket_price, date, time, location);
        }
    }
}
