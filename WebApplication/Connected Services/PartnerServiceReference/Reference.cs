//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1.PartnerServiceReference {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PartnerServiceReference.PartnerWebServicesSoap")]
    public interface PartnerWebServicesSoap {
        
        // CODEGEN: Parameter 'imageData' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddEvent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebApplication1.PartnerServiceReference.AddEventResponse AddEvent(WebApplication1.PartnerServiceReference.AddEventRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddEvent", ReplyAction="*")]
        System.Threading.Tasks.Task<WebApplication1.PartnerServiceReference.AddEventResponse> AddEventAsync(WebApplication1.PartnerServiceReference.AddEventRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetEventsByUserEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetEventsByUserEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetEventsByUserEmail", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetEventsByUserEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPartnerByEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetPartnerByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPartnerByEmail", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPartnerByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdatePartnerByEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdatePartnerByEmail(string email, string companyName, string address, string contactNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdatePartnerByEmail", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> UpdatePartnerByEmailAsync(string email, string companyName, string address, string contactNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteEvent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DeleteEvent(string eventid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteEvent", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DeleteEventAsync(string eventid);
        
        // CODEGEN: Parameter 'imageData' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateEvent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebApplication1.PartnerServiceReference.UpdateEventResponse UpdateEvent(WebApplication1.PartnerServiceReference.UpdateEventRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateEvent", ReplyAction="*")]
        System.Threading.Tasks.Task<WebApplication1.PartnerServiceReference.UpdateEventResponse> UpdateEventAsync(WebApplication1.PartnerServiceReference.UpdateEventRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddEvent", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AddEventRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string eventid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string event_name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string ticket_price;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string email;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string date;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string time;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string location;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public string description;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=8)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] imageData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=9)]
        public int remainingTickets;
        
        public AddEventRequest() {
        }
        
        public AddEventRequest(string eventid, string event_name, string ticket_price, string email, string date, string time, string location, string description, byte[] imageData, int remainingTickets) {
            this.eventid = eventid;
            this.event_name = event_name;
            this.ticket_price = ticket_price;
            this.email = email;
            this.date = date;
            this.time = time;
            this.location = location;
            this.description = description;
            this.imageData = imageData;
            this.remainingTickets = remainingTickets;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddEventResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AddEventResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string AddEventResult;
        
        public AddEventResponse() {
        }
        
        public AddEventResponse(string AddEventResult) {
            this.AddEventResult = AddEventResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateEvent", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpdateEventRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string eventId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string event_name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string ticket_price;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string date;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string time;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string location;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string description;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] imageData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=8)]
        public int soldTickets;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=9)]
        public int remainingTickets;
        
        public UpdateEventRequest() {
        }
        
        public UpdateEventRequest(string eventId, string event_name, string ticket_price, string date, string time, string location, string description, byte[] imageData, int soldTickets, int remainingTickets) {
            this.eventId = eventId;
            this.event_name = event_name;
            this.ticket_price = ticket_price;
            this.date = date;
            this.time = time;
            this.location = location;
            this.description = description;
            this.imageData = imageData;
            this.soldTickets = soldTickets;
            this.remainingTickets = remainingTickets;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateEventResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpdateEventResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UpdateEventResult;
        
        public UpdateEventResponse() {
        }
        
        public UpdateEventResponse(string UpdateEventResult) {
            this.UpdateEventResult = UpdateEventResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface PartnerWebServicesSoapChannel : WebApplication1.PartnerServiceReference.PartnerWebServicesSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PartnerWebServicesSoapClient : System.ServiceModel.ClientBase<WebApplication1.PartnerServiceReference.PartnerWebServicesSoap>, WebApplication1.PartnerServiceReference.PartnerWebServicesSoap {
        
        public PartnerWebServicesSoapClient() {
        }
        
        public PartnerWebServicesSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PartnerWebServicesSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PartnerWebServicesSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PartnerWebServicesSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebApplication1.PartnerServiceReference.AddEventResponse WebApplication1.PartnerServiceReference.PartnerWebServicesSoap.AddEvent(WebApplication1.PartnerServiceReference.AddEventRequest request) {
            return base.Channel.AddEvent(request);
        }
        
        public string AddEvent(string eventid, string event_name, string ticket_price, string email, string date, string time, string location, string description, byte[] imageData, int remainingTickets) {
            WebApplication1.PartnerServiceReference.AddEventRequest inValue = new WebApplication1.PartnerServiceReference.AddEventRequest();
            inValue.eventid = eventid;
            inValue.event_name = event_name;
            inValue.ticket_price = ticket_price;
            inValue.email = email;
            inValue.date = date;
            inValue.time = time;
            inValue.location = location;
            inValue.description = description;
            inValue.imageData = imageData;
            inValue.remainingTickets = remainingTickets;
            WebApplication1.PartnerServiceReference.AddEventResponse retVal = ((WebApplication1.PartnerServiceReference.PartnerWebServicesSoap)(this)).AddEvent(inValue);
            return retVal.AddEventResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebApplication1.PartnerServiceReference.AddEventResponse> WebApplication1.PartnerServiceReference.PartnerWebServicesSoap.AddEventAsync(WebApplication1.PartnerServiceReference.AddEventRequest request) {
            return base.Channel.AddEventAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebApplication1.PartnerServiceReference.AddEventResponse> AddEventAsync(string eventid, string event_name, string ticket_price, string email, string date, string time, string location, string description, byte[] imageData, int remainingTickets) {
            WebApplication1.PartnerServiceReference.AddEventRequest inValue = new WebApplication1.PartnerServiceReference.AddEventRequest();
            inValue.eventid = eventid;
            inValue.event_name = event_name;
            inValue.ticket_price = ticket_price;
            inValue.email = email;
            inValue.date = date;
            inValue.time = time;
            inValue.location = location;
            inValue.description = description;
            inValue.imageData = imageData;
            inValue.remainingTickets = remainingTickets;
            return ((WebApplication1.PartnerServiceReference.PartnerWebServicesSoap)(this)).AddEventAsync(inValue);
        }
        
        public System.Data.DataSet GetEventsByUserEmail(string email) {
            return base.Channel.GetEventsByUserEmail(email);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetEventsByUserEmailAsync(string email) {
            return base.Channel.GetEventsByUserEmailAsync(email);
        }
        
        public System.Data.DataSet GetPartnerByEmail(string email) {
            return base.Channel.GetPartnerByEmail(email);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPartnerByEmailAsync(string email) {
            return base.Channel.GetPartnerByEmailAsync(email);
        }
        
        public bool UpdatePartnerByEmail(string email, string companyName, string address, string contactNo) {
            return base.Channel.UpdatePartnerByEmail(email, companyName, address, contactNo);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePartnerByEmailAsync(string email, string companyName, string address, string contactNo) {
            return base.Channel.UpdatePartnerByEmailAsync(email, companyName, address, contactNo);
        }
        
        public string DeleteEvent(string eventid) {
            return base.Channel.DeleteEvent(eventid);
        }
        
        public System.Threading.Tasks.Task<string> DeleteEventAsync(string eventid) {
            return base.Channel.DeleteEventAsync(eventid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebApplication1.PartnerServiceReference.UpdateEventResponse WebApplication1.PartnerServiceReference.PartnerWebServicesSoap.UpdateEvent(WebApplication1.PartnerServiceReference.UpdateEventRequest request) {
            return base.Channel.UpdateEvent(request);
        }
        
        public string UpdateEvent(string eventId, string event_name, string ticket_price, string date, string time, string location, string description, byte[] imageData, int soldTickets, int remainingTickets) {
            WebApplication1.PartnerServiceReference.UpdateEventRequest inValue = new WebApplication1.PartnerServiceReference.UpdateEventRequest();
            inValue.eventId = eventId;
            inValue.event_name = event_name;
            inValue.ticket_price = ticket_price;
            inValue.date = date;
            inValue.time = time;
            inValue.location = location;
            inValue.description = description;
            inValue.imageData = imageData;
            inValue.soldTickets = soldTickets;
            inValue.remainingTickets = remainingTickets;
            WebApplication1.PartnerServiceReference.UpdateEventResponse retVal = ((WebApplication1.PartnerServiceReference.PartnerWebServicesSoap)(this)).UpdateEvent(inValue);
            return retVal.UpdateEventResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebApplication1.PartnerServiceReference.UpdateEventResponse> WebApplication1.PartnerServiceReference.PartnerWebServicesSoap.UpdateEventAsync(WebApplication1.PartnerServiceReference.UpdateEventRequest request) {
            return base.Channel.UpdateEventAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebApplication1.PartnerServiceReference.UpdateEventResponse> UpdateEventAsync(string eventId, string event_name, string ticket_price, string date, string time, string location, string description, byte[] imageData, int soldTickets, int remainingTickets) {
            WebApplication1.PartnerServiceReference.UpdateEventRequest inValue = new WebApplication1.PartnerServiceReference.UpdateEventRequest();
            inValue.eventId = eventId;
            inValue.event_name = event_name;
            inValue.ticket_price = ticket_price;
            inValue.date = date;
            inValue.time = time;
            inValue.location = location;
            inValue.description = description;
            inValue.imageData = imageData;
            inValue.soldTickets = soldTickets;
            inValue.remainingTickets = remainingTickets;
            return ((WebApplication1.PartnerServiceReference.PartnerWebServicesSoap)(this)).UpdateEventAsync(inValue);
        }
    }
}
